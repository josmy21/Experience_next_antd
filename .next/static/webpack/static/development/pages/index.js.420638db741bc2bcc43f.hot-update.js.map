{"version":3,"file":"static/webpack/static/development/pages/index.js.420638db741bc2bcc43f.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["/**\n *  Author  : Josmy Jose(josmyjose21@gmail.com)\n *  Date    : 18-05-2019\n **/\n\nimport * as React from \"react\";\nimport stylesheet from \"antd/dist/antd.min.css\";\nimport { Table, Button, Row, Col, Icon, Input, Form } from \"antd\";\nimport Text from \"antd/lib/typography/Text\";\nimport EditableContext from \"./constants\";\nimport EditableCell from \"./editableCell\";\nimport Styles from \"./style\";\nimport uuidv1 from 'uuid/v1';\n\n/**Creating App Component for rendering the complete layout including table */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    /**  Intializing the State variables  */\n    this.state = {\n      count: 2,\n      editingKey: \"\",\n      disableButton:false,\n      dataSource: [\n        {\n          key: \"0\",\n          name: \"Josmy\",\n          email: \"josmyjose21@gmail.com\"\n        },\n        {\n          key: \"1\",\n          name: \"Jose\",\n          email: \"JoseGeorge@gmail.com\"\n        }\n      ]\n    };\n    /**Setting  the Columns for the table with properties title,dataIndex,key,editable and\n     * render function for rendering components inside columns*/\n\n    this.columns = [\n      {\n        title: \"Name\",\n        dataIndex: \"name\",\n        key: \"name\",\n        editable: true\n      },\n      {\n        title: \"Email\",\n        dataIndex: \"email\",\n        key: \"email\",\n        editable: true\n      },\n      {\n        title: \"Edit\",\n        dataIndex: \"edit\",\n        key: \"edit\",\n        align: \"center\",\n        render: (text, record) => {\n          const editable = this.isEditing(record);\n          const { dataSource, editingKey } = this.state;\n          return editable ? (\n            <span>\n              <EditableContext.Consumer>\n                {form => (\n                  <a\n                    href=\"javascript:;\"\n                    onClick={() => this.save(form, record.key)}\n                    style={Styles.save}\n                  >\n                    Save\n                  </a>\n                )}\n              </EditableContext.Consumer>\n\n              <a href=\"javascript:;\" onClick={() => this.cancel(record.key)}>\n                Cancel\n              </a>\n            </span>\n          ) : (\n            <a href=\"javascript:;\" onClick={() => this.handleEdit(record.key)}>\n              <Icon type=\"edit\" style={Styles.icon} />\n            </a>\n          );\n        }\n      },\n      {\n        title: \"Delete\",\n        dataIndex: \"delete\",\n        key: \"delete\",\n        align: \"center\",\n        render: (text, record) =>\n          this.state.dataSource.length >= 1 ? (\n            <a\n              href=\"javascript:;\"\n              onClick={() => {\n                this.handleDelete(record.key);\n              }}\n            >\n              <Icon type=\"delete\" style={Styles.icon} />\n            </a>\n          ) : null\n      }\n    ];\n  }\n\n  /**Seting State to local Storage on ComponentDidUpdate  */\n  componentDidUpdate() {\n  \n    localStorage.setItem('states', JSON.stringify(this.state))  \n  }\n\n  /**Getting the state from local Storage on ComponentDidMount */\n  componentDidMount() {\n    // const data = localStorage.getItem('states')\n    // if(data) {\n    //   console.log(data);\n    //   this.setState(prevState => {\n    //     return JSON.parse(data)\n    //   })\n    // }\n  }\n\n\n  /**Funtion\n   * name     :handleAdd\n   * arguments:none\n   * purpose  :updating the data source and incrementing count.\n   * return   :none\n   */\n\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      name:\"\",\n      email: \"\",\n    };\n    \n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1,\n        editingKey:count,\n        disableButton:true\n      });\n    \n  \n  };\n\n  /**Funtion\n   * name     :handleDelete\n   * arguments:key(unique key of the row to be deleted)\n   * purpose  :updating the data source and decrementing count.\n   * return   :none\n   */\n\n  handleDelete = key => {\n    const dataSource = [...this.state.dataSource];\n    const { count } = this.state;\n   \n    this.setState({\n      count: count,\n      dataSource: dataSource.filter(item => item.key !== key),\n      disableButton:false\n    });\n  };\n\n  /**Funtion\n   * name     :handleEdit\n   * arguments:key(unique key of the row to be Edited)\n   * purpose  :setting the editing key to the current key value of the row.\n   * return   :none\n   */\n\n  handleEdit = key => {\n    this.setState({ editingKey: key });\n  };\n\n  /**Funtion\n   * name     :isEditing\n   * arguments:record( row to be Checked)\n   * purpose  :checking whether editingKey and key of the current record same, return \n               true if same.Otherwise return false\n   * return   :boolean value\n   */\n\n  isEditing = record => {\n    const { editingKey } = this.state;\n    return record.key === editingKey;\n  };\n\n  /**Funtion\n   * name     :save\n   * arguments:form,key\n   * purpose  :Splice the old item,Update it with new item entered\n   * return   :return false in case of any validation err\n   */\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row\n        });\n        this.setState({ dataSource: newData, editingKey: \"\" ,disableButton:false});\n      } else {\n        newData.push(row);\n        this.setState({ dataSource: newData, editingKey: \"\",disableButton:false });\n      }\n    });\n  }\n\n  /**Funtion\n   * name     :cancel\n   * arguments:none\n   * purpose  :Setting editingKey empty if user cancelled row editing\n   * return   :return false in case of any validation err\n   */\n\n  cancel = () => {\n    const { dataSource, count } = this.state;\n    dataSource.map(item=>{\n      if(item.name===\"\"||item.email===\"\"){\n        this.setState({\n          count:count-1,\n          dataSource:dataSource.filter(item => item.key !== count-1),\n          disableButton:false\n        })\n      }\n    })\n    this.setState({ editingKey: \"\" });\n  };\n\n  /**Rendering the Ui components */\n  render() {\n    const { dataSource, count,disableButton } = this.state;\n    const components = {\n      body: {\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === \"name\" ? \"text\" : \"email\",\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      };\n    });\n    return (\n      <div style={Styles.container}>\n        <style dangerouslySetInnerHTML={{ __html: stylesheet }} />\n        <Row type=\"flex\">\n          <Col>\n            <Text style={{ fontWeight: \"bold\" }}>{dataSource.length} Users</Text>\n          </Col>\n          <Col />\n          <Col />\n\n          <Col offset={21}>\n            <Button\n              onClick={this.handleAdd}\n              type=\"primary\"\n              style={!disableButton?Styles.button_add:null}\n              disabled={disableButton}\n            >\n              Add User\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <EditableContext.Provider value={this.props.form}>\n            <Table\n              dataSource={dataSource}\n              columns={columns}\n              components={components}\n            />\n          </EditableContext.Provider>\n        </Row>\n      </div>\n    );\n  }\n}\nconst EditableFormTable = Form.create()(App);\n\nexport default EditableFormTable;\n"],"mappings":"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","sourceRoot":""}